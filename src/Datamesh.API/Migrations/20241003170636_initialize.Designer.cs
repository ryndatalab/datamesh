// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Datamesh.API.Migrations
{
    [DbContext(typeof(PortalDbContext))]
    [Migration("20241003170636_initialize")]
    partial class initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<Guid?>("AccountHeadId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountHeadId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.AccountHead", b =>
                {
                    b.Property<Guid>("AccountHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AccountHeadId");

                    b.ToTable("AccountHead");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccCreditId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccDebitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("OnDate")
                        .HasMaxLength(255)
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccCreditId");

                    b.HasIndex("AccDebitId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.Account", b =>
                {
                    b.HasOne("PortalBackend.PortalEntities.EntitiesIsoPay.AccountHead", "AccountHead")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountHeadId");

                    b.Navigation("AccountHead");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.Transaction", b =>
                {
                    b.HasOne("PortalBackend.PortalEntities.EntitiesIsoPay.Account", "AccCredit")
                        .WithMany()
                        .HasForeignKey("AccCreditId");

                    b.HasOne("PortalBackend.PortalEntities.EntitiesIsoPay.Account", "AccDebit")
                        .WithMany()
                        .HasForeignKey("AccDebitId");

                    b.Navigation("AccCredit");

                    b.Navigation("AccDebit");
                });

            modelBuilder.Entity("PortalBackend.PortalEntities.EntitiesIsoPay.AccountHead", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
